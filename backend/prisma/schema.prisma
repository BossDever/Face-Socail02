generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  username          String    @unique
  email             String    @unique
  password          String
  firstName         String
  lastName          String
  profilePicture    String?
  bio               String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  faceEmbeddings    FaceEmbedding[]
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  followers         Follow[]  @relation("following")
  following         Follow[]  @relation("follower")
  taggedInPosts     FaceTag[]
  sentMessages      Message[] @relation("sender")
  receivedMessages  Message[] @relation("receiver")
  attendances       Attendance[]
  cameras           Camera[]
}

model FaceEmbedding {
  id        String   @id @default(uuid())
  userId    String
  embedding String   // JSON string of face embedding vector
  quality   Float    // Quality score of the face embedding
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Post {
  id          String    @id @default(uuid())
  content     String?
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  privacy     Privacy   @default(PUBLIC)
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  media       Media[]
  comments    Comment[]
  likes       Like[]
  faceTags    FaceTag[]

  @@index([authorId])
}

model Media {
  id        String   @id @default(uuid())
  url       String
  type      MediaType
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  faceTags  FaceTag[]

  @@index([postId])
}

model FaceTag {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  mediaId   String?
  x         Float    // X coordinate
  y         Float    // Y coordinate
  width     Float    // Width of face
  height    Float    // Height of face
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  media     Media?   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([postId])
  @@index([mediaId])
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  authorId  String
  postId    String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies   Comment[] @relation("CommentReplies")
  likes     Like[]

  @@index([authorId])
  @@index([postId])
  @@index([parentId])
}

model Like {
  id        String     @id @default(uuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime   @default(now())
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post?      @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment?   @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
  @@index([userId])
  @@index([postId])
  @@index([commentId])
}

model Follow {
  id          String   @id @default(uuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Message {
  id          String   @id @default(uuid())
  content     String
  senderId    String
  receiverId  String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  sender      User     @relation("sender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver    User     @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

model Camera {
  id          String   @id @default(uuid())
  name        String
  url         String   // RTSP or HTTP URL
  location    String?
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  detections  CameraDetection[]

  @@index([ownerId])
}

model CameraDetection {
  id          String   @id @default(uuid())
  cameraId    String
  timestamp   DateTime @default(now())
  faceData    String?  // JSON string of face data
  camera      Camera   @relation(fields: [cameraId], references: [id], onDelete: Cascade)

  @@index([cameraId])
  @@index([timestamp])
}

model Attendance {
  id          String         @id @default(uuid())
  userId      String
  checkInTime DateTime       @default(now())
  checkOutTime DateTime?
  status      AttendanceStatus @default(PRESENT)
  location    String?
  imageUrl    String?        // URL to the attendance image proof
  geoLocation String?        // JSON string of latitude/longitude
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([checkInTime])
}

enum Privacy {
  PUBLIC
  FRIENDS
  PRIVATE
}

enum MediaType {
  IMAGE
  VIDEO
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
  LEAVE
}